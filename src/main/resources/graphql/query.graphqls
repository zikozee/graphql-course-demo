type Query {
    fetchAllCompany: AllCompanyResponse!
    fetchDepartmentsByCompanyName(companyName: String!): DepartmentsResponse!

    # using __name for common objects - interface
    employeeSearch(outsourced: Boolean): [Person]

    employeeSearchByStaffId(staffId: String!): Person

    # for union - two different entities
    employeeWithCompanySearch(employeeId: String!): [PersonAndEntitySearch]

    fetchEmployeesUsingHeaders: [EmployeeDto]
    fetchOutsourcedUsingHeaders: [OutsourcedDto]
    fetchEmployeesUsingHeadersAndArgument(staffIds: [String!]!): [EmployeeDto]

    employeePagination(search: EmployeeSearchInput, page: Int, size: Int): EmployeePagination

    outsourcedPagination(
        search: OutsourcedSearchInput,
        first: Int,
        after: String,
        last: Int,
        before: String
    ): OutsourcedConnection
}